##### Outdoor Sensor Station #####

esphome:
  project:
    name: "outdoor.sensor-station"
    version: "1.0.0"
  name: sensor-station
  friendly_name: Sensor Station
  area: Outside
  on_boot:
    then:
      - logger.log: "Booting, powering sensors"
      # Enable sensor power rail
      - switch.turn_on: pms_power
      - delay: 5s # Let sensors stabilize
      # Conditionally enable PMS
      - script.execute: maybe_enable_pms
      # Delay only if PMS is active
      - if:
          condition:
            lambda: "return id(pms_power).state;"
          then:
            - logger.log: "Delaying for PMS warm-up (30s)"
            - delay: 30s
      # Smart sleep logic
      - script.execute: smart_sleep

esp32:
  board: esp32-c3-devkitm-1 # Closest board profile for ESP32-C3 SuperMini
  framework:
    type: arduino

globals:
  # Track cold boot vs sleep
  - id: is_cold_boot
    type: bool
    restore_value: no
    initial_value: "true"
  # Track display page
  - id: display_page
    type: int
    restore_value: no
    initial_value: "0"
  # Offset used to calculate water level
  - id: pond_offset
    type: float
    restore_value: no
    initial_value: !secret pond_offset

  # The water depth of the pond
  - id: pond_depth
    type: float
    restore_value: no
    initial_value: !secret pond_depth

  # Extra wake time
  - id: extra_awake_time_sec
    type: int
    restore_value: no
    initial_value: !secret additional_awake_time

# Single WiFi network with fast_connect
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # fast_connect: true
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sensor-Station"
    password: !secret hotspot_password

# INFO: Optionally replace the above with below for multi-network.
# The networks will be tried in the order they are provided here.
#
# wifi:
#   networks:
#   - ssid: !secret wifi_ssid
#     password: !secret wifi_password
#   - ssid: !secret backup_wifi_ssid
#     password: !secret backup_wifi_password
#   ap:
#     ssid: "Sensor-Station"
#     password: !secret hotspot_password

captive_portal:

# INFO: Enable to use web server function
# may impact performance, doesn't work during sleep
#
# web_server:
#
# INFO: The auth for the web server is also optional
# Leave commented to require no user/password
#
#   auth:
#     username: !secret web_server_user
#     password: !secret web_server_password

# Enable logging for troubleshooting
logger:
  level: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret api_encryption_key

# Enable MQTT API
mqtt:
  broker: !secret mqtt_broker
  port: 1883
  username: !secret mqtt_user
  password: !secret mqtt_password
  reboot_timeout: 0s
  keepalive: 30s

# Enable OTA updates
ota:
  - platform: esphome
    password: !secret ota_password

# Set deep sleep mode for power efficiency
deep_sleep:
  id: deep_sleep_control
  run_duration: 5min # default run duration
  sleep_duration: 5min # default sleep duration (can be overridden dynamically)

  # I2C bus configuration (GPIO4=SDA, GPIO5=SCL)
i2c:
  sda: GPIO4 # FIXME: <---- Add pull-up resistor
  scl: GPIO5 # FIXME: <---- Add pull-up resistor
  scan: true

# Dallas 1-wire setup
one_wire:
  - platform: gpio
    pin:
      number: GPIO6 #  FIXME: <---- Add pull-up resistor
      mode: #          FIXME: <---- Remove when pull-up resistor added
        input: true #  FIXME: <---- Remove when pull-up resistor added
        pullup: true # FIXME: <---- Remove when pull-up resistor added

# UART for PMS5003 air quality sensor
uart:
  rx_pin: GPIO21
  tx_pin: GPIO20
  baud_rate: 9600

# Configure sensors
sensor:
  # ADC for TEMT6000 ambient light sensor
  - platform: adc
    pin: GPIO0
    name: "Ambient Light"
    id: ambient_light
    icon: mdi:weather-sunny
    device_class: illuminance
    unit_of_measurement: lx
    filters:
      - lambda: |-
          return (x / 10000.0) * 2000000.0;

  # AHT20 temperature and humidity sensor
  - platform: aht10
    temperature:
      name: "Ambient Temperature"
      id: ambient_temp
      icon: mdi:thermometer
    humidity:
      name: "Ambient Humidity"
      id: ambient_humidity
      icon: mdi:water-percent
    update_interval: 5s

  # BMP280 atmospheric pressure sensor
  - platform: bmp280_i2c
    temperature:
      name: "BMP280 Temperature" # Secondary temp reading
      id: bmp280_temp
      icon: mdi:thermometer
      entity_category: "diagnostic"
    pressure:
      name: "Atmospheric Pressure"
      id: atmospheric_pressure
      icon: mdi:gauge
    address: !secret bmp280_address
    update_interval: 5s

  # Average of AHT20 and BMP280 Temperatures
  #   (weighted 75% towards AHT20)
  - platform: template
    name: "Ambient Temperature (Avg)"
    id: ambient_temp_avg
    unit_of_measurement: "Â°C"
    device_class: temperature
    icon: mdi:thermometer
    accuracy_decimals: 1
    update_interval: 5s
    lambda: |-
      float aht = id(ambient_temp).state;
      float bmp = id(bmp280_temp).state;

      bool aht_valid = !isnan(aht) && aht > -40 && aht < 85;
      bool bmp_valid = !isnan(bmp) && bmp > -40 && bmp < 85;

      if (aht_valid && bmp_valid) {
      // Weighted Average: 75% AHT20, 25% BMP280
        return (0.75 * aht) + (0.25 * bmp);
      } else if (aht_valid) {
        // Only AHT20 is valid
        return aht;
      } else if (bmp_valid) {
        // Only BMP280 is valid
        return bmp;
      } else {
        // Neither is valid
        return NAN;
      }

  # TMP102 internal enclosure temperature sensor
  - platform: tmp102
    name: "Enclosure Internal Temp"
    id: enclosure_temp
    address: !secret tmp102_address
    update_interval: 5s
    icon: mdi:thermometer

  # DS18B20 pond water temperature sensor
  - platform: dallas_temp
    address: !secret ds18B20_address
    name: "Pond Water Temperature"
    id: pond_temp
    update_interval: 5s
    icon: mdi:waves

  # INA219 voltage/current sensors
  # Solar Power Supply
  - platform: ina219
    address: !secret ina219_solar_address
    shunt_resistance: 0.1 ohm
    current:
      name: "Solar Current"
      id: solar_current
      icon: mdi:solar-power
      entity_category: "diagnostic"
    power:
      name: "Solar Power"
      id: solar_power
      icon: mdi:solar-power
    bus_voltage:
      name: "Solar Voltage"
      id: solar_voltage
      icon: mdi:solar-power
      entity_category: "diagnostic"
    shunt_voltage:
      name: "Solar Shunt Voltage"
      id: solar_shunt_voltage
      icon: mdi:solar-power
      entity_category: "diagnostic"
    update_interval: 5s

    # Battery Power Supply/Charging
  - platform: ina219
    address: !secret ina219_batt_address
    shunt_resistance: 0.1 ohm
    current:
      name: "Battery Current"
      id: batt_current
      icon: mdi:car-battery
      entity_category: "diagnostic"
    power:
      name: "Battery Power"
      id: batt_power
      icon: mdi:car-battery
    bus_voltage:
      name: Battery Voltage
      id: batt_voltage
      icon: mdi:car-battery
      entity_category: "diagnostic"
    shunt_voltage:
      name: "Battery Shunt Voltage"
      id: battery_shunt_voltage
      icon: mdi:car-battery
      entity_category: "diagnostic"
    update_interval: 5s

  # PMS5003 Particulate Matter Sensor
  - platform: pmsx003
    type: PMSX003
    pm_1_0:
      name: "PM1.0"
      id: pm_1_0
      icon: mdi:blur
    pm_2_5:
      name: "PM2.5"
      id: pm_2_5
      icon: mdi:blur
    pm_10_0:
      name: "PM10.0"
      id: pm_10_0
      icon: mdi:blur
    update_interval: 120s
    id: pms_sensor

  # HC-SR04 Ultrasonic Distance sensor
  - platform: ultrasonic
    trigger_pin: GPIO10
    echo_pin:
      number: GPIO9
      ignore_strapping_warning: true
    name: "Water Level Distance"
    id: water_distance
    icon: mdi:arrow-expand-vertical
    entity_category: "diagnostic"
    update_interval: 1s

  - platform: template
    name: "Smoothed Water Distance"
    id: water_distance_avg
    icon: mdi:arrow-expand-vertical
    unit_of_measurement: "cm"
    entity_category: "diagnostic"
    accuracy_decimals: 1
    lambda: |-
      return id(water_distance).state;
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 30
          send_every: 1

  # Calculate actual water level
  - platform: template
    name: "Pond Water Height"
    icon: mdi:waves-arrow-up
    id: pond_level
    unit_of_measurement: "cm"
    update_interval: 30s
    lambda: |-
      float distance_cm = id(water_distance_avg).state * 100.0;
      float level = id(pond_offset) + id(pond_depth) - distance_cm;
      return level > 0.0 ? level : 0.0;

  # Pond water percent full
  - platform: template
    name: "Pond Fill Level"
    id: pond_level_percent
    icon: mdi:waves-arrow-up
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 30s
    lambda: |-
      float distance_cm = id(water_distance_avg).state * 100.0;
      float level = id(pond_offset) + id(pond_depth) - distance_cm;
      level = level > 0.0 ? level : 0.0;
      return (level / id(pond_depth)) * 100.0;

    # Template to calculate battery charge percentage
  - platform: template
    name: "Battery Percentage"
    id: batt_percent
    icon: mdi:battery-high
    unit_of_measurement: "%"
    device_class: battery
    update_interval: 5s
    accuracy_decimals: 0
    lambda: |-
      float v = id(batt_voltage).state;
      if (v >= 4.2) return 100;
      if (v <= 3.2) return 0;
      return (v - 3.2) * 100.0 / (4.2 - 3.2);

  # Template to calculate System Power
  - platform: template
    name: "System Power Use"
    id: system_power_use
    icon: mdi:flash-outline
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 2
    update_interval: 5s
    lambda: |-
      return (id(solar_voltage).state * id(solar_current).state) -
            (id(batt_voltage).state * id(batt_current).state);

  # Template to calculate System Current (in amps)
  - platform: template
    name: "System Current Use"
    id: system_current_use
    entity_category: "diagnostic"
    device_class: current
    icon: mdi:current-dc
    unit_of_measurement: "A"
    accuracy_decimals: 3
    update_interval: 5s
    lambda: |-
      return id(solar_current).state - id(batt_current).state;

  # Daily total energy usage (resets every day)
  - platform: total_daily_energy
    name: "System Energy Used Today"
    id: total_energy_today
    icon: mdi:counter
    power_id: system_power_use
    unit_of_measurement: "Wh"
    accuracy_decimals: 2
    restore: true

  # Daily total current useage (resets every day)
  - platform: total_daily_energy
    name: "System Current Today"
    id: total_current_today
    entity_category: "diagnostic"
    icon: mdi:counter
    power_id: system_current_use
    unit_of_measurement: "Ah"
    accuracy_decimals: 3
    restore: true

  # Lifetime total energy usage (never resets)
  - platform: integration
    name: "System Energy Used (All-Time)"
    id: total_energy_all_time
    sensor: system_power_use
    time_unit: h
    unit_of_measurement: "Wh"
    accuracy_decimals: 2
    restore: true

  # Lifetime total current usage (never resets)
  - platform: integration
    name: "System Current Used (All-Time)"
    id: total_current_all_time
    entity_category: "diagnostic"
    icon: mdi:counter
    sensor: system_current_use
    time_unit: h
    unit_of_measurement: "Ah"
    accuracy_decimals: 3
    restore: true

  # Daily solar charge (resets every day)
  - platform: total_daily_energy
    name: "Solar Energy Collected Today"
    id: total_solar_today
    icon: mdi:white-balance-sunny
    power_id: solar_power
    unit_of_measurement: "Wh"
    accuracy_decimals: 2
    restore: true

  # Daily solar current (resets every day)
  - platform: total_daily_energy
    name: "Solar Current Today"
    id: solar_current_today
    entity_category: "diagnostic"
    icon: mdi:counter
    power_id: solar_current
    unit_of_measurement: "Ah"
    accuracy_decimals: 3
    restore: true

  # Lifetime solar charge (never resets)
  - platform: integration
    name: "Solar Energy Collected (All-Time)"
    id: total_solar_all_time
    icon: mdi:solar-panel
    sensor: solar_power
    time_unit: h
    unit_of_measurement: "Wh"
    accuracy_decimals: 2
    restore: true

  # Lifewtime solar current (never resets)
  - platform: integration
    name: "Solar Current (All-Time)"
    id: solar_current_all_time
    entity_category: "diagnostic"
    icon: mdi:counter
    sensor: solar_current
    time_unit: h
    unit_of_measurement: "Ah"
    accuracy_decimals: 3
    restore: true

  # WiFi signal strength/RSSI in dB
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    device_class: signal_strength
    icon: mdi:wifi
    update_interval: 60s
    entity_category: "diagnostic"

  # WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    icon: mdi:wifi-strength-4
    id: wifi_signal_percent
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: template
    name: "Battery Is Charging"
    id: battery_is_charging
    device_class: power
    entity_category: diagnostic
    lambda: |-
      if (!id(batt_current).has_state()) {
        return {};
      }
      return (bool)(id(batt_current).state > 0);
    icon: mdi:battery-plus
    update_interval: 10s

text_sensor:
  - platform: template
    name: "Battery Charging State"
    id: battery_charging_state
    entity_category: diagnostic
    lambda: |-
      if (!id(batt_current).has_state()) return {};
      float current = id(batt_current).state;
      if (current > 0) return std::string("charging");
      if (current < 0) return std::string("discharging");
      return std::string("idle");
    update_interval: 10s
    icon: "mdi:battery-arrow-up-down"

switch:
  # Virtual switch to enable wake-lock (for OTA updates)
  - platform: template
    id: wake_hold_switch
    name: "Wake-Lock"
    icon: mdi:power-sleep
    restore_mode: ALWAYS_ON
    optimistic: true
    entity_category: config
    turn_on_action:
      - logger.log: "Wake-Lock ON â Preventing deep sleep"
      - deep_sleep.prevent: deep_sleep_control
    turn_off_action:
      - logger.log: "Wake-Lock OFF â Allowing deep sleep"
      - deep_sleep.allow: deep_sleep_control

    # Switch for PMS power supply
  - platform: gpio
    pin:
      number: GPIO8 # FIXME: <---- Add MOSfet for power control
      ignore_strapping_warning: true
    id: pms_power
    icon: mdi:weather-hazy
    name: "PMS Sensor Power"
    restore_mode: RESTORE_DEFAULT_OFF

    # Heater control via GPIO2 through MOSFET
  - platform: gpio
    pin:
      number: GPIO2 # FIXME: <---- Add MOSfet for power control
      ignore_strapping_warning: true
    name: "Internal Heater"
    icon: mdi:radiator
    id: internal_heater
    entity_category: diagnostic
    internal: true # Hides from Home Assistant

    # Sensor power rail MOSFET
  - platform: gpio
    pin:
      number: GPIO3 # FIXME: <---- Add MOSfet for power control
    id: sensor_power
    icon: mdi:access-point
    name: "Sensor Power Rail"
    restore_mode: RESTORE_DEFAULT_ON

    # OLED power via GPIO7 through MOSFET
  - platform: gpio
    pin:
      number: GPIO7 # FIXME: <---- Add MOSfet for power control
    id: oled_power
    icon: mdi:monitor-shimmer
    name: "Display Power"
    restore_mode: RESTORE_DEFAULT_OFF

  # Switch to force long sleep duration
  - platform: template
    id: force_long_sleep
    icon: mdi:timer-sand
    name: "Force Long Sleep"
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    optimistic: true

  # Switch to force short sleep duration
  - platform: template
    name: "Force Short Sleep"
    id: force_short_sleep
    icon: mdi:timer-outline
    optimistic: true
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF

time:
  # Clock time sourcing
  - platform: homeassistant
    id: ha_time
    on_time:
      - seconds: 9
        minutes: "*"
        then:
          - script.execute: smart_sleep
  - platform: sntp
    id: sntp_time

script:
  # Smart sleep control
  - id: smart_sleep
    then:
      - lambda: |-
          if (id(wake_hold_switch).state) {
            ESP_LOGI("smart_sleep", "Wake-Lock active â skipping deep sleep");
            return;
          }
          ESP_LOGI("smart_sleep", "Wake-Lock OFF â evaluating sleep duration");
          if (id(force_long_sleep).state) {
            ESP_LOGI("smart_sleep", "Force Long Sleep active â sleeping 30 min");
            id(deep_sleep_control).set_sleep_duration(30 * 60 * 1000);
          } else if (id(force_short_sleep).state) {
            ESP_LOGI("smart_sleep", "Force Short Sleep active â sleeping 30 sec");
            id(deep_sleep_control).set_sleep_duration(30 * 1000);
          } else {
            float battery_v = id(batt_voltage).state;
            float solar_i = id(solar_current).state;
            if (battery_v > 3.7 && solar_i > 50.0) {
              ESP_LOGI("smart_sleep", "Battery OK â short sleep");
              id(deep_sleep_control).set_sleep_duration(5 * 60 * 1000);
            } else {
              ESP_LOGI("smart_sleep", "Battery low â long sleep");
              id(deep_sleep_control).set_sleep_duration(30 * 60 * 1000);
            }
          }
      - if:
          condition:
            switch.is_on: pms_power
          then:
            - logger.log: "Extending wake time for PMS warm-up (30s)"
            - delay: !lambda |-
                return (30 + id(extra_awake_time_sec)) * 1000;
          else:
            - logger.log: "Base wake time set to 15 seconds"
            - delay: !lambda |-
                return (15 + id(extra_awake_time_sec)) * 1000;
      # Brief delay to ensure MQTT/API update
      - delay: 2000ms
      - script.execute: prepare_for_sleep

  # Deep sleep preparation
  - id: prepare_for_sleep
    mode: restart
    then:
      - if:
          condition:
            not:
              switch.is_on: wake_hold_switch
          then:
            - logger.log: "Preparing for deep sleep"
            # Clear the OLED screen manually
            - lambda: |-
                id(oled_display).fill(COLOR_OFF);
                id(oled_display).update();
            - delay: 2000ms
            # Power down
            - switch.turn_off: oled_power
            - switch.turn_off: pms_power
            - switch.turn_off: sensor_power
            - switch.turn_off: internal_heater
            - delay: 100ms
            # Enter deep sleep
            - deep_sleep.enter: deep_sleep_control

    # Enable PMS5003 if battery level is sufficient
  - id: maybe_enable_pms
    then:
      - lambda: |-
          float battery_v = id(batt_voltage).state;
          float solar_i = id(solar_current).state;

          if (battery_v > 3.6 || solar_i > 20.0) {
            ESP_LOGI("pms_control", "Battery OK â Powering PMS sensor");
            id(pms_power).turn_on();
          } else {
            ESP_LOGI("pms_control", "Low battery â PMS sensor off");
            id(pms_power).turn_off();
          }

  # Heater safety timeout
  - id: heater_timeout_guard
    mode: restart
    then:
      - delay: 10min
      - switch.turn_off: internal_heater

# Automatic heater activation based on internal temp
climate:
  - platform: thermostat
    name: "Enclosure Heater Control"
    id: enclosure_heater_control
    sensor: enclosure_temp
    humidity_sensor: ambient_humidity
    min_idle_time: 60s
    min_heating_off_time: 120s
    min_heating_run_time: 180s
    heat_deadband: 0.3Â°C
    heat_overrun: 1.5Â°C
    visual:
      min_temperature: -20
      max_temperature: 10
    default_preset: "Normal"
    on_boot_restore_from: memory
    preset:
      # Normal Heating Mode
      - name: "Normal"
        mode: heat
        default_target_temperature_low: 2.0
      # Economy Heating Mode
      - name: "Eco"
        mode: heat
        default_target_temperature_low: 0.5
      # Boost Heating Mode
      - name: "Boost"
        mode: heat
        default_target_temperature_low: 4.0
      # Disable Heating Mode
      - name: "Disable"
        mode: heat
        default_target_temperature_low: -20.0
    heat_action:
      - switch.turn_on: internal_heater
      - script.execute: heater_timeout_guard
    idle_action:
      - switch.turn_off: internal_heater

#   âââââââââââââââââââââââââââââââ DISPLAY âââââââââââââââââââââââââââââ

# Display page turn interval
interval:
  - interval: 5s
    then:
      - lambda: |-
          id(display_page) = (id(display_page) + 1) % 2;

# OLED display fonts
font:
  - file: "fonts/Roboto-Regular.ttf"
    id: roboto
    size: 16

  - file: "fonts/Roboto-Regular.ttf"
    id: font_small
    size: 14
    glyphs:
      [
        " ",
        "!",
        '"',
        "#",
        "$",
        "%",
        "&",
        "'",
        "(",
        ")",
        "*",
        "+",
        ",",
        "-",
        ".",
        "/",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        ":",
        ";",
        "<",
        "=",
        ">",
        "?",
        "@",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
        "[",
        "\\",
        "]",
        "^",
        "_",
        "`",
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "{",
        "|",
        "}",
        "~",
        "Â°",
        "Âµ",
        "Â²",
        "Â³",
        "Â·",
        "Â±",
        "Â¶",
      ]

  - file: "fonts/Roboto-Regular.ttf"
    id: font_large
    size: 28
    glyphs: [" ", "A", "C", "E", "K", "L", "O", "W"]

# Display activation button
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1 #  FIXME: <---- Add button for display activation
      inverted: true # FIXME: <---- Add pull-up resistor for strapping safety
      mode:
        input: true
        pullup: true
    id: oled_activate_button
    name: "OLED Activate Button"
    on_press:
      - logger.log: "OLED button pressed"
      - switch.turn_on: oled_power
      - delay: 30s # Display timeout
      - switch.turn_off: oled_power

# Display configuration
display:
  - platform: ssd1306_i2c
    id: oled_display
    model: "SH1107 128x128"
    address: 0x3C
    rotation: 180
    update_interval: 2s
    # FIXME: Uncomment the wake_hold if statement to enable WAKE-LOCK display
    #        This was commented out for debugging reasons
    lambda: |-
      //if (id(wake_hold_switch).state) {
      //  it.printf(32, 34, id(font_large), "WAKE");
      //  it.printf(32, 68, id(font_large), "LOCK");
      //  return;
      //}
      if (id(display_page) == 0) {
        it.printf(0, 8,  id(font_small), "Temp: %.1fÂ°C", id(ambient_temp).state);
        it.printf(0, 22, id(font_small), "Hum:  %.0f%%", id(ambient_humidity).state);
        it.printf(0, 36, id(font_small), "IntTemp: %.1fÂ°C", id(enclosure_temp).state);
        it.printf(0, 50, id(font_small), "WiFi: %.0f%%", id(wifi_signal_percent).state);
        it.printf(0, 64, id(font_small), "Batt: %.0f%%", id(batt_percent).state);
        it.printf(0, 78, id(font_small), "Solar: %.1fW", id(solar_power).state);
        it.printf(0, 92, id(font_small), "Load: %.1fW", id(system_power_use).state);
        it.printf(0, 106, id(font_small), "Ibat: %.1fmA", id(batt_current).state * 1000);
      } else {
        it.printf(0, 8,  id(font_small), "Light: %.0flx", id(ambient_light).state);
        it.printf(0, 22, id(font_small), "Pressure: %.0f hPa", id(atmospheric_pressure).state);
        it.printf(0, 36, id(font_small), "Pond Temp: %.1fÂ°C", id(pond_temp).state);
        it.printf(0, 50, id(font_small), "Water Depth: %.0fcm", id(pond_level).state);
        it.printf(0, 64, id(font_small), "PM2.5: %.1f", id(pm_2_5).state);
        it.printf(0, 78, id(font_small), "Vsol: %.2fV", id(solar_voltage).state);
        it.printf(0, 92, id(font_small), "Isol: %.1fmA", id(solar_current).state * 1000);
        it.printf(0, 106, id(font_small), "Heat: %s",
                  id(enclosure_heater_control).action == climate::CLIMATE_ACTION_HEATING ? "ON" : "OFF");
      }
